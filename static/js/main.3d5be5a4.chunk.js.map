{"version":3,"sources":["actions/books.js","components/Menu.jsx","components/BookCard.jsx","components/Filter.jsx","actions/filter.js","containers/Filter.js","components/App.jsx","containers/App.js","serviceWorker.js","reducers/books.js","reducers/card.js","reducers/filter.js","reducers/index.js","index.js","store.js"],"names":["setBooks","books","type","payload","MenuComponent","Menu","Item","name","onClick","position","BookCard","title","author","price","image","Card","Image","src","Content","Header","Meta","className","extra","Icon","Filter","setFilter","filterBuy","searchQuery","setSearchQuery","secondary","active","bind","Input","onChange","e","target","value","icon","placeholder","filter","connect","dispatch","bindActionCreators","filterActions","App","this","props","axios","get","then","res","data","isReady","Container","Group","itemsPerRow","map","book","key","id","Component","searchBooks","filterBy","orderBy","sortBy","toLowerCase","indexOf","filterBooks","items","booksActions","Boolean","window","location","hostname","match","initialState","combineReducers","state","action","card","item","store","createStore","rootReducer","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d5be5a4.chunk.js","sourcesContent":["export const setBooks = (books) => ({\r\n   type: 'SET_BOOKS',\r\n   payload: books \r\n})","import React from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nconst  MenuComponent = () =>  \r\n    (\r\n        <Menu>\r\n        <Menu.Item\r\n          name='browse'\r\n          onClick={this}\r\n        >\r\n          Магазин книг\r\n        </Menu.Item>\r\n\r\n        <Menu.Menu position='right'>\r\n          <Menu.Item\r\n            name='signup'\r\n            onClick={this}\r\n          >\r\n            Итого: &nbsp; <b>0</b> руб.\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='help'\r\n            onClick={this}\r\n          >\r\n            Корзина (<b>0</b>)\r\n          </Menu.Item>\r\n        </Menu.Menu>\r\n    </Menu>\r\n    );\r\n\r\n\r\nexport default MenuComponent;\r\n","import React from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\n\r\nconst BookCard = ({title, author, price, image}) => (\r\n  <Card>\r\n    <Image src= {image} />\r\n    <Card.Content>\r\n      <Card.Header> {title} </Card.Header>\r\n      <Card.Meta>\r\n        <span className='date'> {author} </span>\r\n      </Card.Meta>\r\n    </Card.Content>\r\n    <Card.Content extra>\r\n      <a>\r\n        <Icon name='rub' />\r\n        {price}\r\n      </a>\r\n    </Card.Content>\r\n  </Card>\r\n)\r\n\r\nexport default BookCard;","import React from 'react'\r\nimport { Input, Menu } from 'semantic-ui-react';\r\n\r\n\r\nconst Filter = ({ setFilter, filterBuy, searchQuery, setSearchQuery}) => {\r\n\r\n    return(\r\n        <Menu secondary>\r\n          <Menu.Item\r\n            name='all'\r\n            active={filterBuy === 'all'}\r\n            onClick={setFilter.bind(this, 'all')}\r\n          >Все</Menu.Item>\r\n          <Menu.Item\r\n            name='price_high'\r\n            active={filterBuy === 'price_high'}\r\n            onClick={setFilter.bind(this, 'price_high')}\r\n          >Цена (дорогие)</Menu.Item>\r\n          <Menu.Item\r\n            name='price_low'\r\n            active={filterBuy === 'price_low'}\r\n            onClick={setFilter.bind(this, 'price_low')}\r\n          >Цена (дешевые)</Menu.Item>\r\n          <Menu.Item\r\n            name='author'\r\n            active={filterBuy === 'author'}\r\n            onClick={setFilter.bind(this, 'author')}\r\n          >Автор</Menu.Item>\r\n          <Menu.Item>\r\n            <Input \r\n            onChange = {e => setSearchQuery(e.target.value)}\r\n            icon=\"search\" \r\n            value={searchQuery} \r\n            placeholder=\"Введите ...\"\r\n            ></Input>\r\n          </Menu.Item>\r\n        </Menu>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n\r\n/*\r\nexport default class Filter extends Component {\r\n    state = { activeItem: 'all' }\r\n  \r\n    handleItemClick = (e, { name }) => {\r\n        const { setFilter } = this.props;\r\n        this.setState({ activeItem: name });\r\n        setFilter(name);\r\n    };\r\n  \r\n    render() {\r\n      const { activeItem } = this.state;\r\n  \r\n      return (\r\n        <Menu secondary>\r\n          <Menu.Item\r\n            name='all'\r\n            active={activeItem === 'all'}\r\n            onClick={this.handleItemClick}\r\n          >Все</Menu.Item>\r\n          <Menu.Item\r\n            name='popular'\r\n            active={activeItem === 'popular'}\r\n            onClick={this.handleItemClick}\r\n          >Популярные</Menu.Item>\r\n          <Menu.Item\r\n            name='price_high'\r\n            active={activeItem === 'price_high'}\r\n            onClick={this.handleItemClick}\r\n          >Цена (дорогие)</Menu.Item>\r\n          <Menu.Item\r\n            name='price_low'\r\n            active={activeItem === 'price_low'}\r\n            onClick={this.handleItemClick}\r\n          >Цена (дешевые)</Menu.Item>\r\n          <Menu.Item\r\n            name='author'\r\n            active={activeItem === 'author'}\r\n            onClick={this.handleItemClick}\r\n          >Автор</Menu.Item>\r\n        </Menu>\r\n      )\r\n    }\r\n  }\r\n*/","import Filter from \"../components/Filter\";\r\n\r\nexport const setFilter = filter => ({\r\n    type: 'SET_FILTER',\r\n    payload: filter,\r\n});\r\n\r\n\r\nexport const setSearchQuery = value => ({\r\n    type: 'SET_QUERY',\r\n    payload: value,\r\n});","\r\nimport { connect } from 'react-redux';\r\nimport * as filterActions from '../actions/filter';\r\nimport { bindActionCreators } from 'redux';\r\nimport  Filter from '../components/Filter';\r\n\r\n\r\n\r\nconst mapStateToProps = ({ books, filter }) => ({\r\n    filterBuy: filter.filterBuy,\r\n})\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n    ...bindActionCreators(filterActions, dispatch)\r\n  }) ;\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Menu from './Menu';\nimport BookCard from './BookCard';\nimport  { Container } from 'semantic-ui-react';\nimport { Card } from 'semantic-ui-react';\nimport Filter from '../containers/Filter';\n\n\nclass App extends Component {\n\n  componentWillMount() {\n    const { setBooks } = this.props;\n    axios.get('/books.json')\n    .then( res => {\n      setBooks(res.data);\n    });\n  }\n\n  render() {   \n    const { books, isReady }  = this.props; \n    return <Container>\n      <Menu />\n      <Filter />\n        <Card.Group itemsPerRow={4}>\n        {!isReady ? 'Загрузка...': books.map(book => (\n            <BookCard  key = {book.id} {...book} />\n          ))\n        }\n        </Card.Group>\n      </Container>\n  }\n}\n\n/*const mapStateToProps = ({ books }) => ({\n  books: books.items,\n  isReady: books.isReady\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setBooks:  books => dispatch(setBooks(books))\n});\n\n \nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n*/\n\nexport default App;","import { connect } from 'react-redux';\r\nimport * as booksActions  from '../actions/books';\r\nimport App from  '../components/App';\r\nimport { bindActionCreators } from 'redux';\r\nimport orderBy from 'lodash/orderBy.js';\r\n\r\n\r\nconst sortBy = (books, filterBy) => {\r\n\r\n    switch (filterBy) {\r\n      case 'price_high':\r\n        return orderBy(books, 'price', 'desc');\r\n      case 'price_low':\r\n        return orderBy(books, 'price', 'asc');\r\n      case 'author':\r\n        return orderBy(books, 'author', 'asc');\r\n      default:\r\n        return books;\r\n    }\r\n\r\n}\r\n\r\nconst filterBooks = (books, searchQuery) => \r\n    \r\n    books.filter( \r\n      book => \r\n      book.title.toLowerCase().indexOf(searchQuery.toLowerCase()) >= 0 || \r\n      book.author.toLowerCase().indexOf(searchQuery.toLowerCase()) >= 0\r\n    );\r\n\r\n\r\nconst searchBooks = (books, filterBy, searchQuery) => {\r\n  return sortBy(filterBooks(books, searchQuery), filterBy);\r\n}\r\n\r\nconst mapStateToProps = ({ books, filter }) => ({\r\n    books: books.items && searchBooks(books.items, filter.filterBy, filter.searchQuery),\r\n    isReady: books.isReady\r\n  \r\n})\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n    ...bindActionCreators(booksActions, dispatch),\r\n}) ;\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    isReady: false,\r\n    items: null,\r\n    //filterBy: 'all'\r\n};\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_BOOKS':\r\n          return {\r\n            ...state,\r\n            items:  action.payload,\r\n            isReady: true\r\n        };\r\n        /*case 'SET_FILTER':\r\n          return {\r\n            ...state,\r\n            filterBy: action.payload\r\n        };*/\r\n        case 'SET_IS_READY':\r\n          return {\r\n            ...state,\r\n            isReady: action.payload\r\n        };\r\n        /*case 'ADD_BOOKS':\r\n            return {\r\n                books: [\r\n                    ...state.books,\r\n                    action.payload\r\n                ]};\r\n        */\r\n        default:\r\n            return state;\r\n      }\r\n} ","const initialState = {\r\n    items: []\r\n};\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_BOOK_TO_CARD':\r\n          return {\r\n            ...state,\r\n            items: [\r\n                ...state.items,\r\n                action.payload\r\n            ]\r\n        };\r\n        case 'REMOVE_BOOK_FROM_CARD':\r\n          return {\r\n            ...state,\r\n            items: state.items.filter( item => item.id != action.payload)\r\n        };\r\n        default:\r\n            return state;\r\n      }\r\n} ","const initialState = {\r\n    filterBy: 'all',\r\n    searchQuery: '',\r\n};\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_FILTER':\r\n          return {\r\n            ...state,\r\n            filterBy: action.payload\r\n        };\r\n        case 'SET_QUERY':\r\n          return {\r\n            ...state,\r\n            searchQuery: action.payload\r\n        };\r\n        default:\r\n            return state;\r\n      }\r\n} ","import { combineReducers } from 'redux';\r\nimport books from './books';\r\nimport card from './card';\r\nimport filter from './filter';\r\n\r\nexport default combineReducers({\r\n    //books: books\r\n    //ES6\r\n    books,\r\n    card,\r\n    filter\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nimport './app.css';\n\n\nimport { Provider } from 'react-redux';\nimport  createStore from './store';\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\n//метод для создания хранилища\r\nimport { createStore, applyMiddleware } from 'redux';\r\n//позволяет следить за всеми изменениями, которые происходят в хранилище\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './reducers';\r\n\r\n//Создаем хранилище\r\nexport default () => {\r\n    const store = createStore(rootReducer, applyMiddleware(logger));\r\n    return store;\r\n};\r\n\r\n\r\n//reducer\r\n/*function todos(state = [], action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return state.concat([action.text])\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst store = createStore(todos, ['Use Redux'])\r\n\r\n\r\nОтправка\r\nstore.dispatch({\r\n  type: 'ADD_TODO',\r\n  text: 'Read the docs'\r\n});\r\n\r\n*/\r\n\r\n//console.log(store.getState())"],"sourceRoot":""}